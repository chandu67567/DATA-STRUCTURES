#include <stdio.h>
#include <stdbool.h>
#define V 6 // Number of vertices

int minDistance(int dist[], bool visited[]) {
	printf("name : B.Chandana\n");
		printf("regno : 192221144\n");
    int min = INT_MAX, min_index;
    for (int v = 0; v < V; v++)
        if (!visited[v] && dist[v] <= min)
            min = dist[v], min_index = v;
    return min_index;
}

void printPath(int parent[], int j) {
    if (parent[j] == -1)
        return;

    printPath(parent, parent[j]);
    printf("%d ", j);
}

void printSolution(int dist[], int parent[]) {
    int src = 0;
    printf("Vertex \t Distance from Source \t Path\n");
    for (int i = 1; i < V; i++) {
        printf("%d -> %d \t\t %d \t\t\t %d ", src, i, dist[i], src);
        printPath(parent, i);
        printf("\n");
    }
}

void dijkstra(int graph[V][V], int src) {
    int dist[V];
    bool visited[V];
    int parent[V];

    for (int i = 0; i < V; i++) {
        dist[i] = INT_MAX;
        visited[i] = false;
        parent[i] = -1;
    }

    dist[src] = 0;

    for (int count = 0; count < V - 1; count++) {
        int u = minDistance(dist, visited);
        visited[u] = true;

        for (int v = 0; v < V; v++)
            if (!visited[v] && graph[u][v] && dist[u] != INT_MAX && dist[u] + graph[u][v] < dist[v]) {
                dist[v] = dist[u] + graph[u][v];
                parent[v] = u;
            }
    }

    printSolution(dist, parent);
}

int main() {
    int graph[V][V] = {
        {0, 5, 0, 9, 2, 0},
        {5, 0, 2, 0, 0, 7},
        {0, 2, 0, 0, 0, 6},
        {9, 0, 0, 0, 0, 0},
        {2, 0, 0, 0, 0, 0},
        {0, 7, 6, 0, 0, 0}
    };

    dijkstra(graph, 0);

    return 0;
}
